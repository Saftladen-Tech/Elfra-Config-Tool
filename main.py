import os
import re
import sys

# Vorgabewerte f√ºr alle Farben
DEFAULT_COLORS = {
    "primary": "#669c35",
    "secondary": "#aaaaaa",
    "accent": "#fde1af",
    "dark": "#0e0e11",
    "bright": "#ffffff",
    "success": "#00DC82",
    "warn": "#fcc800",
    "error": "#ff6467"
}

# HEX-Validator
def is_valid_hex(color: str) -> bool:
    return bool(re.match(r"^#(?:[0-9a-fA-F]{3}){1,2}$", color))

# CLI-Abfrage einer Farbe
def prompt_color(name: str, default: str) -> str:
    while True:
        user_input = input(f'{name.capitalize()} [{default}]: ').strip()
        if not user_input:
            return default
        if is_valid_hex(user_input):
            return user_input
        print("‚ùå Ung√ºltiger HEX-Wert. Bitte versuche es erneut (Beispiel: #112233)")

# TypeScript-Code generieren
def generate_theme_ts(colors: dict, font: str, font_provider: str, auth_config: dict, institution_name: str, institution_web: str, topics: list) -> str:
    ts_lines = []
    ts_lines.append("// This file is auto-generated by Elfra Config Tool")
    ts_lines.append("// Do not edit this file directly.")
    ts_lines.append("export const config = {")
    ts_lines.append("  colors: {")
    for key, value in colors.items():
        ts_lines.append(f'    {key}: "{value}",')
    ts_lines.append("  },")
    ts_lines.append(f"  font: \'{font}\',")
    ts_lines.append(f"  fontProvider: \'{font_provider}\',")
    ts_lines.append("  auth: {")
    ts_lines.append(f"    enabled: {str(auth_config['enabled']).lower()},")
    if auth_config['enabled']:
        ts_lines.append(f"    provider: \'{auth_config['provider']}\',")
        ts_lines.append(f"    publicKey: \'{auth_config['public_key']}\',")
        ts_lines.append(f"    secretKey: \'{auth_config['secret_key']}\',")
        ts_lines.append(f"    server: \'{auth_config['server']}\',")
    ts_lines.append("  },")
    ts_lines.append("  institution: {")
    ts_lines.append(f"    name: \'{institution_name}\',")
    ts_lines.append(f"    web: \'{institution_web}\',")
    ts_lines.append("  },")
    ts_lines.append("  topics: [")
    for topic in topics:
        ts_lines.append(f"    {{ name: '{topic['name']}', color: '{topic['color']}' }},")
    ts_lines.append("  ],")
    ts_lines.append("};")
    return "\n".join(ts_lines)

def main():
    print("ELFRA Config Tool")
    print("Gib HEX-Farben ein oder dr√ºcke Enter, um die Standardfarbe zu √ºbernehmen.\n")

    final_colors = {}
    for color_key, default in DEFAULT_COLORS.items():
        final_colors[color_key] = prompt_color(color_key, default)

    font = input("üìÑ Schriftart (z. B. 'Inter'): ").strip() or "Inter"
    font_provider = input("üî§ Font Provider (z. B. 'Google Fonts'): ").strip() or "Google Fonts"

    institution_name = input("üè¢ Institution Name: ").strip() or "Saftladen-Tech"
    institution_web = input("üåê Institution Webseite: ").strip() or "https://github.com/Saftladen-Tech"

    auth_config = {"enabled": False}
    auth_config["enabled"] = input("üîê Usermanagement verwenden? (j/n): ").strip().lower() in ("j", "ja", "y", "yes")
    if auth_config["enabled"]:
        auth_config["provider"] = input("  üîë Auth Provider: ").strip()
        auth_config["public_key"] = input("  üóùÔ∏è  Public Key: ").strip()
        auth_config["secret_key"] = input("  üîí Secret Key: ").strip()
        auth_config["server"] = input("  üåê Server URL: ").strip()

    # Abfrage der Topics
    topics = []
    print("\nüìö Themen hinzuf√ºgen (Name und Farbe):")
    while True:
        topic_name = input("  ‚ûï Thema Name (oder Enter zum Beenden): ").strip()
        if not topic_name:
            break
        topic_color = input(f"  üé® Farbe f√ºr '{topic_name}' (HEX, z. B. #112233): ").strip()
        if not is_valid_hex(topic_color):
            print("‚ùå Ung√ºltiger HEX-Wert. Bitte versuche es erneut.")
            continue
        topics.append({"name": topic_name, "color": topic_color})

    ts_code = generate_theme_ts(final_colors, font, font_provider, auth_config, institution_name, institution_web, topics)

    # Zielpfad via Argument oder Default
    output_path = sys.argv[1] if len(sys.argv) > 1 else "config.ts"

    # Existiert Datei bereits?
    if os.path.exists(output_path):
        overwrite = input(f"‚ö†Ô∏è  Die Datei '{output_path}' existiert bereits. √úberschreiben? (j/n): ").strip().lower()
        if overwrite not in ("j", "ja", "y", "yes"):
            print("‚ùå Abgebrochen.")
            exit()
    
    try:
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(ts_code)
        print(f"\n‚úÖ Config-Datei erfolgreich erstellt unter: {output_path}")
    except (OSError, IOError) as e:
        if isinstance(e, PermissionError):
            print(f"‚ùå Schreibfehler: Keine Berechtigung, um die Datei '{output_path}' zu erstellen. Bitte √ºberpr√ºfe die Zugriffsrechte.")
        else:
            print(f"‚ùå Fehler beim Schreiben der Datei '{output_path}': {e}")
        print("Bitte √ºberpr√ºfe die Schreibrechte oder w√§hle einen anderen Speicherort.")

if __name__ == "__main__":
    main()
# EOF